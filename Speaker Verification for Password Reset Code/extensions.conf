[from-internal]
exten => t,1,NoOp()
exten => e,1,NoOp()

exten => 100,1,Answer()
same => n,Playback(welcome)
same => n,Playback(press_1)
same => n,Playback(press_2)
same => n,WaitExten()

exten => 1,1,Goto(select-option,1,1)
exten => 2,1,Goto(select-option,2,1)

[select-option]
exten => 1,1,Answer()
same => n,Playback(select_1)
same => n,Set(CURRENT_TIME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
same => n,Set(CALLER_ID=${CALLERID(num)})
same => n,Set(i=1)

same => n,Playback(prompted_question)

; Create a new directory with the caller ID as the directory name
same => n,System(mkdir -p /home/setenane/Desktop/SV_for_Password_Reset/enrollment/${CALLER_ID})

; Loop to ask questions and record responses
same => n(loop),Playback(question_${i}) ; Playback the question message for the current iteration

; Set the recording duration based on the question number (i)
same => n,Set(RECORDING_DURATION=${IF($[${i} == 1]?20:${IF($[${i} == 2]?20:${IF($[${i} == 3]?30:${IF($[${i} == 4]?35:40)})})})})

same => n,Set(RECORDED_FILE=/home/setenane/Desktop/SV_for_Password_Reset/enrollment/${CALLER_ID}/${CALLER_ID}-${CURRENT_TIME}-${i}.wav)
same => n,Playback(beep) ; Play a beep sound before recording starts
same => n,Record(${RECORDED_FILE},${RECORDING_DURATION},10,16000)
same => n,Set(i=$[${i}+1])
same => n,GotoIf($[${i} < 6]?loop:end)

same => n(end),Playback(please_wait_processing)

; Execute the enrollment.py script using a system call, passing the callerID as an argument
same => n,System(/usr/bin/python3 /home/setenane/Desktop/SV_for_Password_Reset/Code_Snippets/mfcc/enrollment.py ${CALLER_ID})

same => n,System(/usr/bin/python3 /home/setenane/Desktop/SV_for_Password_Reset/Code_Snippets/mfcc/train_UserGMM.py ${CALLER_ID})

; Handle enrollment success
same => n,Playback(enrolled_successfully)

; Playback recorded successfully and thank you messages
same => n,Playback(thank_you)

; Hang up the call
same => n,Hangup()
 

exten => 2,1,Answer()
same => n,Playback(select_2)
same => n,Set(CURRENT_TIME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
same => n,Set(CALLER_ID=${CALLERID(num)})
same => n,Set(i=1)

same => n,Playback(prompted_question)

; Create a new directory with the caller ID as the directory name
same => n,System(mkdir -p /home/setenane/Desktop/SV_for_Password_Reset/verification/${CALLER_ID})

; Loop to ask questions and record responses
same => n(loop),Playback(question_${i}) ; Playback the question message for the current iteration

; Set the recording duration based on the question number (i)
same => n,Set(RECORDING_DURATION=${IF($[${i} == 1]?20:${IF($[${i} == 2]?20:${IF($[${i} == 3]?30:${IF($[${i} == 4]?35:40)})})})})

same => n,Set(RECORDED_FILE=/home/setenane/Desktop/SV_for_Password_Reset/verification/${CALLER_ID}/${CALLER_ID}-${CURRENT_TIME}-${i}.wav)
same => n,Playback(beep) ; Play a beep sound before recording starts
same => n,Record(${RECORDED_FILE},${RECORDING_DURATION},10,16000)
same => n,Set(i=$[${i}+1])
same => n,GotoIf($[${i} < 6]?loop:end)

same => n(end),Playback(please_wait_processing)

; Execute the enrollment.py script using a system call, passing the callerID as an argument
same => n,System(/usr/bin/python3 /home/setenane/Desktop/SV_for_Password_Reset/Code_Snippets/mfcc/verification.py ${CALLER_ID})

same => n,System(/usr/bin/python3 /home/setenane/Desktop/SV_for_Password_Reset/Code_Snippets/mfcc/Verify_User.py ${CALLER_ID})

same => n,Set(VERIFICATION_RESULT=${SHELL(/usr/bin/python3 /home/setenane/Desktop/SV_for_Password_Reset/Code_Snippets/mfcc/Verify_User.py ${CALLER_ID})})
same => n,Verbose(VERIFICATION_RESULT is ${VERIFICATION_RESULT})

same => n,ExecIf($["${VERIFICATION_RESULT}" > "0.5"]?Goto(password_reset))
same => n,Goto(verification_failed)

same => n(password_reset),Playback(reset_password_prompt)
same => n,Read(code_input,enter_code,4)
same => n,Verbose(1, The entered code is: ${code_input})

; Store the 4-digit code in a variable called new_password
same => n,Set(new_password=${code_input})

; Write the caller_id and new_password to passwords.txt
same => n,System(echo "${CALLER_ID} ${new_password}" >> /home/setenane/Desktop/SV_for_Password_Reset/passwords.txt)



; Handle verification failure
same => n(verification_failed),Playback(verification_failed_prompt)



same => n,Hangup()





